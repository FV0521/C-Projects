// Federico Vazquez
// 000771783
// 10/18/2022
// 10/16/2022
// Program allows user to enter a number of package(s) purchased, calculates using a certain discount
// based on range of the packages, and displays output, and accumulative summary outputs

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace _3333_VazquezF_Lab04
{
    public partial class Form1 : Form
    {
        // initizlize fields; these retain their values when user clicks 'Clear' button when other values
        // (local variables) are erased. field's lifetime will exist in memory when program is executed even when
        // 'Clear' button is clicked
        // fields will be the following: accumulating
        // sums of the amount of discounts, packages purchased, orders, and
        // the average discount (sum of amount of discount / sum of orders)

        private decimal sumAmountDiscount = 0.00m;
        private int sumPackagesPurchased = 0;
        private int sumOrders = 0;
        private decimal averageDiscount = 00.0m;

        public Form1()
        {
            InitializeComponent();
        }

        private void ResetButton_Click(object sender, EventArgs e)
        {
            // Clears the input for TextBox control, and any output label controls
            // returns to focus of the textboox input control

            packagesPurchasedInput.Clear();
            discountPercentLabel.Text = "";
            amountBeforeDiscountLabel.Text = "";
            amountDiscountLabel.Text = "";
            totalAmountAfterDiscountLabel.Text = "";
            packagesPurchasedInput.Focus();

        }

        private void ExitButton_Click(object sender, EventArgs e)
        {
            // closes the program's form
            this.Close();
        }

        private void CalculateButton_Click(object sender, EventArgs e)
        {
            // Declare named constant (price of software package is $99.00)

            const decimal RETAIL_PRICE_SOFTWARE_PACKAGE = 99m;
            


            // Declare the variables

            decimal totalAmountBeforeDiscount; // amount before discount (number of software packages purchased times $99.00)
            decimal discountPercent; // the discount percentage (percent form, one decimal place)
            decimal amountOfDiscount; // the amount of discount ( total before discount times the discount percent)
            decimal totalAmountAfterDiscount; // the amount after discount (total amount minus the amount of discount)
            
            

          

            // validates the numberPackagesPurchased TextBox control; determines if it is valid input value (integers only)

            if (int.TryParse(packagesPurchasedInput.Text, out int numberOfPackagesPurchased))
            {
                

                
                if (numberOfPackagesPurchased > 0) // validates if any non zero, non negative values are in input
                {
                    
                    // nested if else statements; determines the appropriate discount depending on the
                    // number of software packages bought within the ranges; && is best used for
                    // any numbers within the range for apporpriate discounts


                    // conditional if statement when 1-9 packages are bought, then no discount 

                    if (numberOfPackagesPurchased >= 1 && numberOfPackagesPurchased <= 9)
                    {

                        discountPercent = 0; // variable assigned to 0 when number of purchased is 1-9
                    }
                    // first else if conditional statement when 10-19 packages are bought, 20% discount
                    else if (numberOfPackagesPurchased >= 10 && numberOfPackagesPurchased <= 19)
                    {

                        discountPercent = .20m; // variable assigned to .20 when number of purchased is 10-19


                    }
                    // second else if conditional statement when 20-49 packages are bought, 30% discount
                    else if (numberOfPackagesPurchased >= 20 && numberOfPackagesPurchased <= 49)
                    {

                        discountPercent = .30m; // variable assigned to .30 when number of purchased is 20-49

                    }
                    // third else if conditional statement when 50-99 packages are bought, 40% discount
                    else if (numberOfPackagesPurchased >= 50 && numberOfPackagesPurchased <= 99)
                    {

                        discountPercent = .40m; // variable assigned to .40 when number of purchases are 50-99

                    }
                    // else conditional statement if 100 packages or more are bought, 50%
                    else 
                    {

                        discountPercent = .50m; // variable assigned to .50 when number of purchases at least 100


                    }
                    // calculations; can be placed here instead of the nested if else statements to reduce code
                    totalAmountBeforeDiscount = RETAIL_PRICE_SOFTWARE_PACKAGE * numberOfPackagesPurchased;
                    amountOfDiscount = totalAmountBeforeDiscount * discountPercent;
                    totalAmountAfterDiscount = totalAmountBeforeDiscount - amountOfDiscount;



                    // accumulators

                    sumAmountDiscount += amountOfDiscount; // sums the amount of discount for each transaction
                    sumPackagesPurchased += numberOfPackagesPurchased; // sums the amount of packages bought for each transaction
                    sumOrders += 1; // keeps count of the number of orders each time user clicks Calculate button
                    averageDiscount = sumAmountDiscount / sumOrders; // divides sum of amount of discounts by sum of orders


                    // display outputs to their respective output labels controls

                    discountPercentLabel.Text = discountPercent.ToString("p1"); // displays percent discount types
                    amountBeforeDiscountLabel.Text = totalAmountBeforeDiscount.ToString("c"); // displays amount before discount
                    amountDiscountLabel.Text = amountOfDiscount.ToString("c"); // displays amount of discount
                    totalAmountAfterDiscountLabel.Text = totalAmountAfterDiscount.ToString("c"); // displays amount after discount
                    sumAmountDiscountLabel.Text = sumAmountDiscount.ToString("c"); // displays sum of amount of discounts
                    sumPackagesPurchasedLabel.Text = sumPackagesPurchased.ToString("n0"); // displays the sum of packages
                    sumOrdersLabel.Text = sumOrders.ToString("n0"); // displays the sum of orders count
                    averageDiscountLabel.Text = averageDiscount.ToString("c"); // displays the average discount 



                }
                else
                {
                    // else block shows message if a negative number or 0 is entered; validates that with MessageBox
                    MessageBox.Show("Number of package(s) must be greater than zero.");
                    packagesPurchasedInput.Clear();
                    packagesPurchasedInput.Focus();
                }
                
            }
            else
            {
                // else block display an error for amount of software purchased

                MessageBox.Show("Invalid input for number of package(s) purchased.");
                packagesPurchasedInput.Clear();
                packagesPurchasedInput.Focus();
            }
        }
    }
}
