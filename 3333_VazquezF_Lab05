// Federico Vazquez
// 000771783
// 11/1/2022
// 10/29/2022
// Distance Calculator; used to enter hours and speed to get the product and
// put the results in the listbox, summary output labels, and get the average 



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace _3333_VazquezF_Lab05
{
    public partial class Form1 : Form
    // initizlize fields; these retain their values when user clicks 'Clear' button when other values
    // (local variables) are erased. field's lifetime will exist in memory when program is executed even when
    // 'Clear' button is clicked
    {
        private int totalDistance = 0;
        private int totalHoursTraveled = 0;
        private int totalTrips = 0;

        public Form1()
        {
            InitializeComponent();
        }

        private void CalculateButton_Click(object sender, EventArgs e)
        {
            // initilze the values
           
            

            int distance = 0;
            double averageDistance;
            
          
            // TryParse method to validate whether vehicleSpeed is an integer input
            if (int.TryParse(vehicleSpeedTextBox.Text, out int vehicleSpeed))
            {
                // inner if statement for vehicleSpeed to determine apporpriate input is within range
               if (vehicleSpeed >= 1 && vehicleSpeed <= 180) 
               { 
                    // TryParse method to validate whether hoursTraveled is an integer input
                    if (int.TryParse(hoursTraveledTextBox.Text, out int hoursTraveled))
                    {
                        // inner if statement for hoursTraveled to determine appropriate input is
                        // within range
                        if (hoursTraveled >= 1 && hoursTraveled <=50)
                        {
                            // for loop is Boolean expression; contains the initialization
                            // , test expression, and update expresison.
                            // count =1 is initizalizer, hoursTraveled is test expression
                            // and count++ is update expression
                            for (int count = 1; count <= hoursTraveled; count++)
                            {
                                

                                // calculation for distance
                                distance = vehicleSpeed * count;
                                // adds to ListBox; dependent on the number of hours entered in
                                // the hoursTraveled TextBox
                                distanceListBox.Items.Add("After Hour " + count + " the distance is " +
                                distance.ToString("n2"));
                            }

                           
                        }

                        
                        // else block statement if hours are entered outside of 1-50 range
                        else
                        {
                            MessageBox.Show("Hours must be between 1 and 50.");
                            hoursTraveledTextBox.Clear();
                            hoursTraveledTextBox.Focus();
                        }
                        // accumulators 

                        totalDistance += distance;
                        totalHoursTraveled += hoursTraveled;
                        totalTrips += 1;

                        // averageDistance calculation; this is not an accumulation for
                        // averageDistance
                        averageDistance = totalDistance / totalTrips;

                        // output ToString methods to respective label boxes and textboxes
                        vehicleSpeedTextBox.Text = vehicleSpeed.ToString("n2");
                        totalTripsLabel.Text = totalTrips.ToString("n0");
                        totalDistanceLabel.Text = totalDistance.ToString("n2");
                        totalHoursTraveledLabel.Text = totalHoursTraveled.ToString("n0");
                        averageDistanceLabel.Text = averageDistance.ToString("n2");
                    }
                    // else statement if non numeric input was entered
                    else
                    {
                        MessageBox.Show("Hours traveled must be a whole number.");
                        hoursTraveledTextBox.Clear();
                        hoursTraveledTextBox.Focus();

                    }



                }
               // else statement if the speed was entered outside the 1-180 range
                else
                {
                    MessageBox.Show("Speed must be between 1 and 180");
                    vehicleSpeedTextBox.Clear();
                    vehicleSpeedTextBox.Focus();

                }
            }
            // else statement if a non numeric value was entered for speed input
            else
            {
                MessageBox.Show("Speed must be a number.");
                vehicleSpeedTextBox.Clear();
                vehicleSpeedTextBox.Focus();

            }

            








        }
        // clears all outputs (except three summary statements in summary box) 
        // and returns to focus
        private void ClearButton_Click(object sender, EventArgs e)
        {

            vehicleSpeedTextBox.Clear();
            hoursTraveledTextBox.Clear();
            distanceListBox.Items.Clear();
            averageDistanceLabel.Text = "";
            vehicleSpeedTextBox.Focus();

        }
        // closes the program's form
        private void ExitButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
